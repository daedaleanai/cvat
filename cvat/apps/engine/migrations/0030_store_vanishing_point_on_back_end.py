# Generated by Django 2.2.10 on 2021-02-11 14:12
import math
from itertools import combinations

from django.db import migrations

from cvat.apps.engine.ddln.geometry import Point, Line, get_angle_between
from cvat.apps.engine.utils import grouper

ANGLE_THRESHOLD = 5 * math.pi / 180


def iterate_rays_shapes(apps):
    LabeledShape = apps.get_model('engine', 'LabeledShape')
    for shape in LabeledShape.objects.filter(type='rays').all():
        yield shape


def calculate_vanishing_point(lines):
    combs = ((a.intersect(b), get_lines_angle(a, b)) for a, b in combinations(lines, 2))
    points, angles = zip(*combs)
    points = [p for p in points if p]
    if not points:
        return None
    max_angle = max(angles)
    if max_angle <= ANGLE_THRESHOLD:
        return None
    return get_average_point(points)


def get_lines_angle(a, b):
    angle = get_angle_between(a.get_angle(), b.get_angle())
    return angle if angle < math.pi / 2 else (math.pi - angle)


def get_average_point(points):
    if not points:
        return None
    n = len(points)
    sum = Point(0, 0)
    for p in points:
        sum += p
    average_point = Point(sum.x / n, sum.y / n)
    return average_point


def forward_func(apps, schema_editor):
    for shape in iterate_rays_shapes(apps):
        points = [Point(x, y) for x, y in grouper(shape.points, 2)]

        lines = [Line.by_two_points(a, b) for a, b in grouper(points, 2)]
        vanishing_point = calculate_vanishing_point(lines)
        if vanishing_point:
            points.append(vanishing_point)

        coords = []
        for p in points:
            coords.append(p.x)
            coords.append(p.y)
        shape.points = coords
        shape.save()


def backward_func(apps, schema_editor):
    for shape in iterate_rays_shapes(apps):
        points = [Point(x, y) for x, y in grouper(shape.points, 2)]

        if len(points) % 2 != 0:
            points.pop()

        coords = []
        for p in points:
            coords.append(p.x)
            coords.append(p.y)
        shape.points = coords
        shape.save()


class Migration(migrations.Migration):
    dependencies = [
        ('engine', '0029_change_shape_type_choices'),
    ]

    operations = [
        migrations.RunPython(
            code=forward_func,
            reverse_code=backward_func,
        ),
    ]
